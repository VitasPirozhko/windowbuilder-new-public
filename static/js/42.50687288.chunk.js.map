{"version":3,"sources":["openjscad/exec_js_dxf.js"],"names":["exec_dxf","scheme","Drawing","d","contours","bounds","ox","glasses","selected_glasses","h","height","y","name","prod_name","replace","export_path","src","path","clone","prev","flatten","curves","forEach","point1","point2","index","length","getDistance","drawLine","x","export_glass","glass","withLay","addLayer","elm","ACI","LAYER","setActiveLayer","impost","imposts","substr","indexOf","pad","iterate_contours","contour","layer","cnstr","profile","profiles","export_contour","outputData","Blob","toDxfString","type","$p","wsql","alasql","utils","saveAs"],"mappings":"kHAKO,SAASA,EAAUC,EAAQC,GAEhC,IAAIC,EAAI,IAAID,EAEZ,MAAM,SAACE,EAAD,OAAWC,EAAX,GAAmBC,GAAML,EACzBM,EAAUN,EAAOO,mBACjBC,EAAIJ,EAAOK,OAASL,EAAOM,EAGjC,IAAIC,EAAON,EAAGO,WAAU,GAAMC,QAAQ,KAAK,KAG3C,SAASC,EAAYC,GACnB,MAAMC,EAAOD,EAAIC,KAAKC,OAAM,GAC5B,IAAIC,EACJF,EAAKG,QAAQ,IACbH,EAAKI,OAAOC,QAAQ,EAAEC,SAAQC,UAASC,KAIrC,GAHIN,IACFA,EAAOI,GAENE,GAASR,EAAKI,OAAOK,OAAS,EAC/BF,EAASP,EAAKI,OAAO,GAAGE,YAErB,GAAGJ,EAAKQ,YAAYH,GAAU,EAC/B,OAEJrB,EAAEyB,SAAST,EAAKU,EAAGpB,EAAIU,EAAKR,EAAGa,EAAOK,EAAGpB,EAAIe,EAAOb,GACpDQ,EAAOK,IA2BX,SAASM,EAAaC,EAAOC,GAO3B,GALA7B,EAAE8B,SAAU,KAAIF,EAAMG,IAAOhC,EAAQiC,IAAIC,MAAO,cAChDjC,EAAEkC,eAAgB,KAAIN,EAAMG,KAE5BnB,EAAYgB,GAERC,EAAS,CAEX7B,EAAE8B,SAAU,OAAMF,EAAMG,IAAOhC,EAAQiC,IAAIC,MAAO,cAClDjC,EAAEkC,eAAgB,OAAMN,EAAMG,KAE9B,IAAK,MAAMI,KAAUP,EAAMQ,QACzBxB,EAAYuB,IAKlB,GA9DA1B,EAAOA,EAAK4B,OAAO,EAAG5B,EAAK6B,QAAQ,MA8DhClC,EAAQmB,OACTI,EAAavB,EAAQ,IAAI,GACzBK,GAAQ,IAAML,EAAQ,GAAG2B,IAAIQ,IAAI,OAE/B,CAEFtC,EAASkB,SAlCX,SAASqB,EAAiBC,GACxB,MAAM,SAAExC,GAAawC,GAdvB,SAAwBC,GACtB1C,EAAE8B,SAAU,KAAIY,EAAMC,MAAS5C,EAAQiC,IAAIC,MAAO,cAClDjC,EAAEkC,eAAgB,KAAIQ,EAAMC,OAM5B,IAAI,MAAMC,KAAWF,EAAMG,SACzBjC,EAAYgC,GAOdE,CAAeL,GAEXxC,EAASsB,QACXtB,EAASkB,QAAQqB,MA+BnB,IAAK,MAAMZ,KAAS9B,EAAOM,QACzBuB,EAAaC,GAAO,GAKxB,MAAMmB,EAAa,IAAIC,KAAK,CAAChD,EAAEiD,cAActC,QAAQ,MAAO,SAAU,CAACuC,KAAO,oBAC9EC,GAAGC,KAAKC,OAAOC,MAAMC,OAAOR,EAAetC,EAAF,QA7F3C","file":"static/js/42.50687288.chunk.js","sourcesContent":["/**\r\n * ### Осуществляет экспорт в dxf\r\n * Created by Evgeniy Malyarov on 24.11.2017.\r\n */\r\n\r\nexport function exec_dxf (scheme, Drawing) {\r\n\r\n  let d = new Drawing();\r\n\r\n  const {contours, bounds, ox} = scheme;\r\n  const glasses = scheme.selected_glasses();\r\n  const h = bounds.height + bounds.y;\r\n\r\n  // имя будущего файла\r\n  let name = ox.prod_name(true).replace(/\\//,'-');\r\n  name = name.substr(0, name.indexOf('/'));\r\n\r\n  function export_path(src) {\r\n    const path = src.path.clone(false);\r\n    let prev;\r\n    path.flatten(0.5);\r\n    path.curves.forEach(({point1, point2}, index) => {\r\n      if(!prev){\r\n        prev = point1;\r\n      }\r\n      if(index == path.curves.length - 1){\r\n        point2 = path.curves[0].point1;\r\n      }\r\n      else if(prev.getDistance(point2) < 2){\r\n          return;\r\n      }\r\n      d.drawLine(prev.x, h - prev.y, point2.x, h - point2.y);\r\n      prev = point2;\r\n    });\r\n  }\r\n\r\n  function export_contour(layer) {\r\n    d.addLayer(`l_${layer.cnstr}`, Drawing.ACI.LAYER, 'CONTINUOUS');\r\n    d.setActiveLayer(`l_${layer.cnstr}`);\r\n\r\n    // for(const glass of layer.glasses(false, true)) {\r\n    //   export_path(glass);\r\n    // }\r\n\r\n    for(const profile of layer.profiles) {\r\n      export_path(profile);\r\n    }\r\n  }\r\n\r\n  function iterate_contours(contour) {\r\n    const { contours } = contour;\r\n\r\n    export_contour(contour);\r\n\r\n    if (contours.length) {\r\n      contours.forEach(iterate_contours);\r\n    }\r\n  }\r\n\r\n  function export_glass(glass, withLay) {\r\n    // добавляем слой для заполнения\r\n    d.addLayer(`g_${glass.elm}`, Drawing.ACI.LAYER, 'CONTINUOUS');\r\n    d.setActiveLayer(`g_${glass.elm}`);\r\n    \r\n    export_path(glass);\r\n\r\n    if (withLay) {\r\n      // добавляем слой для раскладки\r\n      d.addLayer(`lay_${glass.elm}`, Drawing.ACI.LAYER, 'CONTINUOUS');\r\n      d.setActiveLayer(`lay_${glass.elm}`);\r\n\r\n      for (const impost of glass.imposts) {\r\n        export_path(impost);\r\n      }\r\n    }\r\n  }\r\n\r\n  if(glasses.length){\r\n    export_glass(glasses[0], true);\r\n    name += '-' + glasses[0].elm.pad(2);\r\n  }\r\n  else{\r\n    // экспортируем контуры\r\n    contours.forEach(iterate_contours);\r\n\r\n    // экспортируем заполнения с раскладкой\r\n    for (const glass of scheme.glasses) {\r\n      export_glass(glass, true);\r\n    }\r\n  }\r\n\r\n\r\n  const outputData = new Blob([d.toDxfString().replace(/\\n/g, '\\r\\n')], {type : 'application/dxf'});\r\n  $p.wsql.alasql.utils.saveAs(outputData, `${name}.dxf`);\r\n\r\n}\r\n"],"sourceRoot":""}