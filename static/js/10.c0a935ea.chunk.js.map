{"version":3,"sources":["../node_modules/dxf-writer/src/Face.js","../node_modules/dxf-writer/src/Point.js","../node_modules/dxf-writer/src/Drawing.js","../node_modules/dxf-writer/src/LineType.js","../node_modules/dxf-writer/src/Layer.js","../node_modules/dxf-writer/src/Line.js","../node_modules/dxf-writer/src/Arc.js","../node_modules/dxf-writer/src/Circle.js","../node_modules/dxf-writer/src/Text.js","../node_modules/dxf-writer/src/Polyline.js","../node_modules/dxf-writer/src/Polyline3d.js"],"names":["module","exports","constructor","x1","y1","z1","x2","y2","z2","x3","y3","z3","x4","y4","z4","this","toDxfString","s","layer","name","x","y","LineType","require","Layer","Line","Arc","Circle","Text","Polyline","Polyline3d","Face","Point","Drawing","layers","activeLayer","lineTypes","headers","setUnits","i","LINE_TYPES","length","addLineType","description","elements","LAYERS","addLayer","colorNumber","lineTypeName","setActiveLayer","drawLine","addShape","drawPoint","drawRect","drawArc","r","startAngle","endAngle","drawCircle","drawText","height","rotation","value","horizontalAlignment","verticalAlignment","drawPolyline","points","drawPolyline3d","forEach","point","setTrueColor","trueColor","drawFace","_getDxfLtypeTable","_getDxfLayerTable","layerName","header","variable","values","_getHeader","unit","UNITS","shapesToDxf","ACI","LAYER","RED","YELLOW","GREEN","CYAN","BLUE","MAGENTA","WHITE","getElementsSum","sum","Math","abs","shapes","color","shape","push","getShapes","H_ALIGN_CODES","V_ALIGN_CODES","hAlign","vAlign","includes","max","indexOf"],"mappings":"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","file":"static/js/10.c0a935ea.chunk.js","sourcesContent":["class Face\r\n{\r\n    constructor(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.z1 = z1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.z2 = z2;\r\n        this.x3 = x3;\r\n        this.y3 = y3;\r\n        this.z3 = z3;\r\n        this.x4 = x4;\r\n        this.y4 = y4;\r\n        this.z4 = z4;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/3dface_al_u05_c.htm\r\n        let s = `0\\n3DFACE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n${this.z1}\\n`;\r\n        s += `11\\n${this.x2}\\n21\\n${this.y2}\\n31\\n${this.z2}\\n`;\r\n        s += `12\\n${this.x3}\\n22\\n${this.y3}\\n32\\n${this.z3}\\n`;\r\n        s += `13\\n${this.x4}\\n23\\n${this.y4}\\n33\\n${this.z4}\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Face;","class Point\r\n{\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/point_al_u05_c.htm\r\n        let s = `0\\nPOINT\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x}\\n20\\n${this.y}\\n30\\n0\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Point;","const LineType = require('./LineType');\r\nconst Layer = require('./Layer');\r\nconst Line = require('./Line');\r\nconst Arc = require('./Arc');\r\nconst Circle = require('./Circle');\r\nconst Text = require('./Text');\r\nconst Polyline = require('./Polyline');\r\nconst Polyline3d = require('./Polyline3d');\r\nconst Face = require('./Face');\r\nconst Point = require('./Point');\r\n\r\nclass Drawing\r\n{\r\n    constructor()\r\n    {\r\n        this.layers = {};\r\n        this.activeLayer = null;\r\n        this.lineTypes = {};\r\n        this.headers = {};\r\n\r\n        this.setUnits('Unitless');\r\n\r\n        for (let i = 0; i < Drawing.LINE_TYPES.length; ++i)\r\n        {\r\n            this.addLineType(Drawing.LINE_TYPES[i].name,\r\n                             Drawing.LINE_TYPES[i].description,\r\n                             Drawing.LINE_TYPES[i].elements);\r\n        }\r\n\r\n        for (let i = 0; i < Drawing.LAYERS.length; ++i)\r\n        {\r\n            this.addLayer(Drawing.LAYERS[i].name,\r\n                          Drawing.LAYERS[i].colorNumber,\r\n                          Drawing.LAYERS[i].lineTypeName);\r\n        }\r\n\r\n        this.setActiveLayer('0');\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @param {string} name\r\n     * @param {string} description\r\n     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a \r\n     */\r\n    addLineType(name, description, elements)\r\n    {\r\n        this.lineTypes[name] = new LineType(name, description, elements);\r\n        return this;\r\n    }\r\n\r\n    addLayer(name, colorNumber, lineTypeName)\r\n    {\r\n        this.layers[name] = new Layer(name, colorNumber, lineTypeName);\r\n        return this;\r\n    }\r\n    \r\n    setActiveLayer(name)\r\n    {\r\n        this.activeLayer = this.layers[name];\r\n        return this;\r\n    }\r\n\r\n    drawLine(x1, y1, x2, y2)\r\n    {\r\n        this.activeLayer.addShape(new Line(x1, y1, x2, y2));\r\n        return this;\r\n    }\r\n\r\n    drawPoint(x, y)\r\n    {\r\n        this.activeLayer.addShape(new Point(x, y));\r\n        return this;\r\n    }\r\n    \r\n    drawRect(x1, y1, x2, y2)\r\n    {\r\n        this.activeLayer.addShape(new Line(x1, y1, x2, y1));\r\n        this.activeLayer.addShape(new Line(x1, y2, x2, y2));\r\n        this.activeLayer.addShape(new Line(x1, y1, x1, y2));\r\n        this.activeLayer.addShape(new Line(x2, y1, x2, y2));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     * @param {number} startAngle - degree \r\n     * @param {number} endAngle - degree \r\n     */\r\n    drawArc(x1, y1, r, startAngle, endAngle)\r\n    {\r\n        this.activeLayer.addShape(new Arc(x1, y1, r, startAngle, endAngle));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     */\r\n    drawCircle(x1, y1, r)\r\n    {\r\n        this.activeLayer.addShape(new Circle(x1, y1, r));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} x1 - x\r\n     * @param {number} y1 - y\r\n     * @param {number} height - Text height\r\n     * @param {number} rotation - Text rotation\r\n     * @param {string} value - the string itself\r\n     * @param {string} [horizontalAlignment=\"left\"] left | center | right\r\n     * @param {string} [verticalAlignment=\"baseline\"] baseline | bottom | middle | top\r\n     */\r\n    drawText(x1, y1, height, rotation, value, horizontalAlignment = 'left', verticalAlignment = 'baseline')\r\n    {\r\n        this.activeLayer.addShape(new Text(x1, y1, height, rotation, value, horizontalAlignment, verticalAlignment));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {array} points - Array of points like [ [x1, y1], [x2, y2]... ] \r\n     */\r\n    drawPolyline(points)\r\n    {\r\n        this.activeLayer.addShape(new Polyline(points));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {array} points - Array of points like [ [x1, y1, z1], [x2, y2, z1]... ] \r\n     */\r\n    drawPolyline3d(points)\r\n    {\r\n        points.forEach(point => {\r\n            if (point.length !== 3){\r\n                throw \"Require 3D coordinate\"\r\n            }\r\n        });\r\n        this.activeLayer.addShape(new Polyline3d(points));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} trueColor - Integer representing the true color, can be passed as an hexadecimal value of the form 0xRRGGBB\r\n     */\r\n    setTrueColor(trueColor)\r\n    {\r\n        this.activeLayer.setTrueColor(trueColor);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} x1 - x\r\n     * @param {number} y1 - y\r\n     * @param {number} z1 - z\r\n     * @param {number} x2 - x\r\n     * @param {number} y2 - y\r\n     * @param {number} z2 - z\r\n     * @param {number} x3 - x\r\n     * @param {number} y3 - y\r\n     * @param {number} z3 - z\r\n     * @param {number} x4 - x\r\n     * @param {number} y4 - y\r\n     * @param {number} z4 - z\r\n     */\r\n    drawFace(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)\r\n    {\r\n        this.activeLayer.addShape(new Face(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4));\r\n        return this;\r\n    }\r\n\r\n    _getDxfLtypeTable()\r\n    {\r\n        let s = '0\\nTABLE\\n'; //start table\r\n        s += '2\\nLTYPE\\n';    //name table as LTYPE table\r\n\r\n        for (let lineTypeName in this.lineTypes)\r\n        {\r\n            s += this.lineTypes[lineTypeName].toDxfString();\r\n        }\r\n\r\n        s += '0\\nENDTAB\\n'; //end table\r\n\r\n        return s;\r\n    }\r\n\r\n    _getDxfLayerTable()\r\n    {\r\n        let s = '0\\nTABLE\\n'; //start table\r\n        s += '2\\nLAYER\\n'; //name table as LAYER table\r\n\r\n        for (let layerName in this.layers)\r\n        {\r\n            s += this.layers[layerName].toDxfString();\r\n        }\r\n\r\n        s += '0\\nENDTAB\\n';\r\n\r\n        return s;\r\n    }\r\n\r\n     /**\r\n      * @see https://www.autodesk.com/techpubs/autocad/acadr14/dxf/header_section_al_u05_c.htm\r\n      * @see https://www.autodesk.com/techpubs/autocad/acad2000/dxf/header_section_group_codes_dxf_02.htm\r\n      * \r\n      * @param {string} variable \r\n      * @param {array} values Array of \"two elements arrays\". [  [value1_GroupCode, value1_value], [value2_GroupCode, value2_value]  ]\r\n      */\r\n    header(variable, values) {\r\n        this.headers[variable] = values;\r\n        return this;\r\n    }\r\n\r\n    _getHeader(variable, values){\r\n        let s = '9\\n$'+ variable +'\\n';\r\n\r\n        for (let value of values) {\r\n            s += `${value[0]}\\n${value[1]}\\n`;\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} unit see Drawing.UNITS\r\n     */\r\n    setUnits(unit) {\r\n        let value = (typeof Drawing.UNITS[unit] != 'undefined') ? Drawing.UNITS[unit]:Drawing.UNITS['Unitless'];\r\n        this.header('INSUNITS', [[70, Drawing.UNITS[unit]]]);\r\n        return this;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        let s = '';\r\n\r\n        //start section\r\n        s += '0\\nSECTION\\n';\r\n        //name section as HEADER section\r\n        s += '2\\nHEADER\\n';\r\n\r\n        for (let header in this.headers) {\r\n            s += this._getHeader(header, this.headers[header]);\r\n        }\r\n\r\n        //end section\r\n        s += '0\\nENDSEC\\n';\r\n\r\n\r\n        //start section\r\n        s += '0\\nSECTION\\n';\r\n        //name section as TABLES section\r\n        s += '2\\nTABLES\\n';\r\n\r\n        s += this._getDxfLtypeTable();\r\n        s += this._getDxfLayerTable();\r\n\r\n        //end section\r\n        s += '0\\nENDSEC\\n';\r\n\r\n\r\n        //ENTITES section\r\n        s += '0\\nSECTION\\n';\r\n        s += '2\\nENTITIES\\n';\r\n\r\n        for (let layerName in this.layers)\r\n        {\r\n            let layer = this.layers[layerName];\r\n            s += layer.shapesToDxf();\r\n            // let shapes = layer.getShapes();\r\n        }\r\n\r\n        s += '0\\nENDSEC\\n';\r\n\r\n\r\n        //close file\r\n        s += '0\\nEOF';\r\n\r\n        return s;\r\n    }\r\n\r\n}\r\n\r\n//AutoCAD Color Index (ACI)\r\n//http://sub-atomic.com/~moses/acadcolors.html\r\nDrawing.ACI = \r\n{\r\n    LAYER : 0,\r\n    RED : 1,\r\n    YELLOW : 2,\r\n    GREEN : 3,\r\n    CYAN : 4,\r\n    BLUE : 5,\r\n    MAGENTA : 6,\r\n    WHITE : 7\r\n}\r\n\r\nDrawing.LINE_TYPES = \r\n[\r\n    {name: 'CONTINUOUS', description: '______', elements: []},\r\n    {name: 'DASHED',    description: '_ _ _ ', elements: [5.0, -5.0]},\r\n    {name: 'DOTTED',    description: '. . . ', elements: [0.0, -5.0]}\r\n]\r\n\r\nDrawing.LAYERS = \r\n[\r\n    {name: '0',  colorNumber: Drawing.ACI.WHITE, lineTypeName: 'CONTINUOUS'}\r\n]\r\n\r\n//https://www.autodesk.com/techpubs/autocad/acad2000/dxf/header_section_group_codes_dxf_02.htm\r\nDrawing.UNITS = {\r\n    'Unitless':0,\r\n    'Inches':1,\r\n    'Feet':2,\r\n    'Miles':3,\r\n    'Millimeters':4,\r\n    'Centimeters':5,\r\n    'Meters':6,\r\n    'Kilometers':7,\r\n    'Microinches':8,\r\n    'Mils':9,\r\n    'Yards':10,\r\n    'Angstroms':11,\r\n    'Nanometers':12,\r\n    'Microns':13,\r\n    'Decimeters':14,\r\n    'Decameters':15,\r\n    'Hectometers':16,\r\n    'Gigameters':17,\r\n    'Astronomical units':18,\r\n    'Light years':19,\r\n    'Parsecs':20\r\n}\r\n\r\nmodule.exports = Drawing;\r\n","class LineType\r\n{\r\n    /**\r\n     * @param {string} name\r\n     * @param {string} description\r\n     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a \r\n     */\r\n    constructor(name, description, elements)\r\n    {\r\n        this.name = name;\r\n        this.description = description;\r\n        this.elements = elements;\r\n    }\r\n\r\n    /**\r\n     * @link https://www.autodesk.com/techpubs/autocad/acadr14/dxf/ltype_al_u05_c.htm\r\n     */\r\n    toDxfString()\r\n    {\r\n        let s = '0\\nLTYPE\\n';\r\n        s += '72\\n65\\n';\r\n        s += '70\\n64\\n';\r\n        s += `2\\n${this.name}\\n`;\r\n        s += `3\\n${this.description}\\n`;\r\n        s += `73\\n${this.elements.length}\\n`;\r\n        s += `40\\n${this.getElementsSum()}\\n`;\r\n\r\n        for (let i = 0; i < this.elements.length; ++i)\r\n        {\r\n            s += `49\\n${this.elements[i]}\\n`;\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    getElementsSum()\r\n    {\r\n        let sum = 0;\r\n        for (let i = 0; i < this.elements.length; ++i)\r\n        {\r\n            sum += Math.abs(this.elements[i]);\r\n        }\r\n\r\n        return sum;\r\n    }\r\n}\r\n\r\nmodule.exports = LineType;","class Layer\r\n{\r\n    constructor(name, colorNumber, lineTypeName)\r\n    {\r\n        this.name = name;\r\n        this.colorNumber = colorNumber;\r\n        this.lineTypeName = lineTypeName;\r\n        this.shapes = [];\r\n        this.trueColor = -1;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        let s = '0\\nLAYER\\n';\r\n        s += '70\\n64\\n';\r\n        s += `2\\n${this.name}\\n`;\r\n        if (this.trueColor !== -1)\r\n        {\r\n            s += `420\\n${this.trueColor}\\n`\r\n        }\r\n        else\r\n        {\r\n            s += `62\\n${this.colorNumber}\\n`;\r\n        }\r\n        s += `6\\n${this.lineTypeName}\\n`;\r\n        return s;        \r\n    }\r\n\r\n    setTrueColor(color)\r\n    {\r\n        this.trueColor = color;\r\n    }\r\n\r\n    addShape(shape)\r\n    {\r\n        this.shapes.push(shape);\r\n        shape.layer = this;\r\n    }\r\n\r\n    getShapes()\r\n    {\r\n        return this.shapes;\r\n    }\r\n\r\n    shapesToDxf()\r\n    {\r\n        let s = '';\r\n        for (let i = 0; i < this.shapes.length; ++i)\r\n        {\r\n            s += this.shapes[i].toDxfString();\r\n        } \r\n        \r\n        \r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Layer;","class Line\r\n{\r\n    constructor(x1, y1, x2, y2)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm\r\n        let s = `0\\nLINE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `11\\n${this.x2}\\n21\\n${this.y2}\\n31\\n0\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Line;","class Arc\r\n{\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     * @param {number} startAngle - degree \r\n     * @param {number} endAngle - degree \r\n     */\r\n    constructor(x1, y1, r, startAngle, endAngle)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.r = r;\r\n        this.startAngle = startAngle;\r\n        this.endAngle = endAngle;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm\r\n        let s = `0\\nARC\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `40\\n${this.r}\\n50\\n${this.startAngle}\\n51\\n${this.endAngle}\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Arc;","class Circle\r\n{\r\n    /**\r\n     * @param {number} x1 - Center x\r\n     * @param {number} y1 - Center y\r\n     * @param {number} r - radius\r\n     */\r\n    constructor(x1, y1, r)\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.r = r;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/circle_al_u05_c.htm\r\n        let s = `0\\nCIRCLE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `40\\n${this.r}\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Circle;","const H_ALIGN_CODES = ['left', 'center', 'right'];\r\nconst V_ALIGN_CODES = ['baseline','bottom', 'middle', 'top'];\r\n\r\nclass Text\r\n{\r\n    /**\r\n     * @param {number} x1 - x\r\n     * @param {number} y1 - y\r\n     * @param {number} height - Text height\r\n     * @param {number} rotation - Text rotation\r\n     * @param {string} value - the string itself\r\n     * @param {string} [horizontalAlignment=\"left\"] left | center | right\r\n     * @param {string} [verticalAlignment=\"baseline\"] baseline | bottom | middle | top\r\n     */\r\n    constructor(x1, y1, height, rotation, value, horizontalAlignment = 'left', verticalAlignment = 'baseline')\r\n    {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.height = height;\r\n        this.rotation = rotation;\r\n        this.value = value;\r\n        this.hAlign = horizontalAlignment;\r\n        this.vAlign = verticalAlignment;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/text_al_u05_c.htm\r\n        let s = `0\\nTEXT\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `1\\n${this.value}\\n`;\r\n        s += `10\\n${this.x1}\\n20\\n${this.y1}\\n30\\n0\\n`;\r\n        s += `40\\n${this.height}\\n50\\n${this.rotation}\\n`;\r\n        if (H_ALIGN_CODES.includes(this.hAlign, 1) || V_ALIGN_CODES.includes(this.vAlign, 1)){\r\n            s += `11\\n${this.x1}\\n21\\n${this.y1}\\n31\\n0\\n`;\r\n            s += `72\\n${Math.max(H_ALIGN_CODES.indexOf(this.hAlign),0)}\\n`;\r\n            s += `73\\n${Math.max(V_ALIGN_CODES.indexOf(this.vAlign),0)}\\n`;\r\n        }\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Text;","class Polyline\r\n{\r\n    /**\r\n     * @param {array} points - Array of points like [ [x1, y1], [x2, y2]... ]\r\n     */\r\n    constructor(points)\r\n    {\r\n        this.points = points;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/polyline_dxf_06.htm\r\n        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/vertex_dxf_06.htm\r\n        let s = `0\\nPOLYLINE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `66\\n1\\n70\\n0\\n`;\r\n\r\n        for (let i = 0; i < this.points.length; ++i)\r\n        {\r\n            s += `0\\nVERTEX\\n`;\r\n            s += `8\\n${this.layer.name}\\n`;\r\n            s += `70\\n0\\n`;\r\n            s += `10\\n${this.points[i][0]}\\n20\\n${this.points[i][1]}\\n`;\r\n        }\r\n        \r\n        s += `0\\nSEQEND\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Polyline;","class Polyline3d\r\n{\r\n    /**\r\n     * @param {array} points - Array of points like [ [x1, y1, z1], [x2, y2, z2]... ]\r\n     */\r\n    constructor(points)\r\n    {\r\n        this.points = points;\r\n    }\r\n\r\n    toDxfString()\r\n    {\r\n        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/polyline_dxf_06.htm\r\n        //https://www.autodesk.com/techpubs/autocad/acad2000/dxf/vertex_dxf_06.htm\r\n        let s = `0\\nPOLYLINE\\n`;\r\n        s += `8\\n${this.layer.name}\\n`;\r\n        s += `66\\n1\\n70\\n8\\n`;\r\n\r\n        for (let i = 0; i < this.points.length; ++i)\r\n        {\r\n            s += `0\\nVERTEX\\n`;\r\n            s += `8\\n${this.layer.name}\\n`;\r\n            s += `70\\n0\\n`;\r\n            s += `10\\n${this.points[i][0]}\\n20\\n${this.points[i][1]}\\n30\\n${this.points[i][2]}\\n`;\r\n        }\r\n        \r\n        s += `0\\nSEQEND\\n`;\r\n        return s;\r\n    }\r\n}\r\n\r\nmodule.exports = Polyline3d;"],"sourceRoot":""}